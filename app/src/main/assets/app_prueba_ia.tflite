{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN4KWptjWP1Zw98hTIJEIIy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":383},"id":"eEQ_I2PQ2H3r","executionInfo":{"status":"error","timestamp":1750769843976,"user_tz":300,"elapsed":28,"user":{"displayName":"Edwin dominguez","userId":"03551536715710168993"}},"outputId":"41353edc-3dbe-4b68-a952-d1b82f7602ea"},"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'mysql'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-11-3375735550.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtensorflow\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mmysql\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnector\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mLabelEncoder\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'mysql'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}],"source":["import tensorflow as tf\n","import mysql.connector\n","import numpy as np\n","import cv2\n","from sklearn.preprocessing import LabelEncoder\n","from tensorflow.keras.utils import to_categorical\n","import os\n","\n","# Configuración de conexión a MySQL\n","db_config = {\n","    'user': 'Frosdh',\n","    'password': 'blancoss',\n","    'host': '127.0.0.1',\n","    'database': 'crudpruebas'\n","}\n","\n","# 1. Conectar y obtener rutas y etiquetas\n","def obtener_datos_desde_bd():\n","    cnx = mysql.connector.connect(**db_config)\n","    cursor = cnx.cursor()\n","    query = \"SELECT ruta, etiqueta FROM imagenes\"\n","    cursor.execute(query)\n","\n","    rutas = []\n","    etiquetas = []\n","\n","    for ruta, etiqueta in cursor:\n","        rutas.append(ruta)\n","        etiquetas.append(etiqueta)\n","\n","    cursor.close()\n","    cnx.close()\n","\n","    return rutas, etiquetas\n","\n","# 2. Cargar y preprocesar imágenes\n","def cargar_imagenes_preprocesar(rutas):\n","    imagenes = []\n","    for path in rutas:\n","        if not os.path.isfile(path):\n","            print(f\"Imagen no encontrada: {path}\")\n","            continue\n","        img = cv2.imread(path)\n","        if img is None:\n","            print(f\"Error leyendo imagen en: {path}\")\n","            continue\n","        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convierte BGR a RGB si quieres\n","        img = cv2.resize(img, (224, 224))\n","        img = img.astype(np.float32) / 255.0\n","        imagenes.append(img)\n","    return np.array(imagenes)\n","\n","def main():\n","    rutas, etiquetas = obtener_datos_desde_bd()\n","    if len(rutas) == 0:\n","        print(\"No se encontraron datos en la base.\")\n","        return\n","\n","    print(f\"Cargando {len(rutas)} imágenes...\")\n","    imagenes = cargar_imagenes_preprocesar(rutas)\n","\n","    # Codificar etiquetas\n","    le = LabelEncoder()\n","    etiquetas_num = le.fit_transform(etiquetas)\n","    etiquetas_cat = to_categorical(etiquetas_num)\n","\n","    num_classes = len(le.classes_)\n","    print(f\"Clases detectadas: {le.classes_}\")\n","\n","    # Crear modelo CNN\n","    model = tf.keras.Sequential([\n","        tf.keras.layers.Input(shape=(224, 224, 3)),\n","        tf.keras.layers.Conv2D(32, 3, activation='relu'),\n","        tf.keras.layers.MaxPooling2D(),\n","        tf.keras.layers.Conv2D(64, 3, activation='relu'),\n","        tf.keras.layers.MaxPooling2D(),\n","        tf.keras.layers.Flatten(),\n","        tf.keras.layers.Dense(128, activation='relu'),\n","        tf.keras.layers.Dense(num_classes, activation='softmax')\n","    ])\n","\n","    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","\n","    # Entrenar modelo\n","    model.fit(imagenes, etiquetas_cat, epochs=10, validation_split=0.2)\n","\n","    # Guardar modelo entrenado en SavedModel\n","    model.save('modelo_basura')\n","\n","    # Convertir a TFLite\n","    converter = tf.lite.TFLiteConverter.from_saved_model('modelo_basura')\n","    tflite_model = converter.convert()\n","\n","    with open('modelo_basura.tflite', 'wb') as f:\n","        f.write(tflite_model)\n","\n","    print(\"✅ Modelo convertido a modelo_basura.tflite para usar en Android\")\n","\n","if __name__ == '__main__':\n","    main()\n"]}]}